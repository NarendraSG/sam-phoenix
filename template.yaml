AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    CodeUri: ./apps/
    Runtime: nodejs16.x
    Architectures:
      - arm64
    Timeout: 30
    MemorySize: 128
    Environment:
        Variables:
          TABLE_NAME: !Ref UserTableName
          STAGE: !Ref Stage
          REGION: !Ref AWS::Region


Parameters:
  Stage:
    Type: String
    Default: local
    Description: Developing while debugging on lambda function

  UserTableName:
    Type: String
    Default: nv_users
    Description: User Table Name 

Resources:

  # API with Authentication and APIs and finctions implemented

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Auth:
        DefaultAuthorizer: IAMAuthorizer
        Authorizers:
          IAMAuthorizer:
            FunctionArn: !GetAtt IAMFunction.Arn

  IAMFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: iam.handler

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
        - ./auth/src/iam.ts
          
  MyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      Events:
          Function1:
            Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
            Properties:
              RestApiId: !Ref RestApi
              Path: /hello
              Method: get
      
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
        - ./api/src/handler.ts

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Handler: get.handler
      Events:
          Function2:
            Type: Api 
            Properties:
              RestApiId: !Ref RestApi
              Path: /users
              Method: get
      
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
        - crud/src/get.ts

  PostUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Handler: create.handler
      Events:
          Function2:
            Type: Api 
            Properties:
              RestApiId: !Ref RestApi
              Path: /users
              Method: post
      
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
        - crud/src/create.ts

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Handler: update.handler
      Events:
          Function2:
            Type: Api 
            Properties:
              RestApiId: !Ref RestApi
              Path: /users
              Method: put
      
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
        - crud/src/update.ts

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Handler: delete.handler
      Events:
          Function2:
            Type: Api 
            Properties:
              RestApiId: !Ref RestApi
              Path: /users
              Method: delete
      
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
        - crud/src/delete.ts


  # Lambda inserting message into Queue and another lambda pulling message from it and processing

  FirstQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: my-first-queue
      VisibilityTimeout: 30

  QueueMsgProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: msgProcessor.handler
      Policies: 
        - SQSPollerPolicy:
            QueueName: 
              !GetAtt FirstQueue.QueueName
      Events:
        MsgProcessor:
          Type: SQS
          Properties:
            Queue: !GetAtt FirstQueue.Arn
            Enabled: true
            BatchSize: 5
    
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
        - api/src/msgProcessor.ts
  
  QueueMsgInjectorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: msgInjector.handler
      Environment:
        Variables:
          QUEUE_URL: !GetAtt FirstQueue.QueueUrl
      Policies: 
        - SQSSendMessagePolicy:
            QueueName: 
              !GetAtt FirstQueue.QueueName
      
      Events:
        MsgInjector:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /inject
            Method: get
    
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: false
        EntryPoints: 
        - api/src/msgInjector.ts
        
    
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref UserTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

Outputs:
  BaseURL:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"